package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _static_map_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4d\xaf\x94\x30\x14\x86\xf7\xfc\x8a\x37\x6c\x84\x5c\xe4\x5e\xd7\x88\x8b\x7b\x75\x61\x62\x34\x31\xa3\x9b\x9b\x59\x54\x7a\xa0\x4d\x3a\x2d\xb6\x87\x19\x88\x33\xff\xdd\x94\x32\x8e\x2e\xd4\x0d\x39\x81\xf7\x79\xce\x07\xfd\x64\x3b\xd6\xce\xa2\xd7\x86\xc9\x7f\x76\xa7\x50\x94\xf8\x91\x01\xf7\xf7\x78\x4b\x9d\x11\x9e\x70\x14\x5e\x8b\x6f\x86\x42\x86\x58\x43\xdb\x71\xe2\x6a\x43\x2a\x70\xfc\x56\x81\x63\x29\x2b\xe8\x0a\x3c\xf3\x57\x61\x26\x6a\x32\xa4\x30\x5a\x48\xd7\x4d\x07\xb2\x5c\x0f\xc4\xef\x0c\xc5\xf2\x71\x79\x2f\x8b\x3c\x90\xf0\x9d\xda\xd1\xcc\x79\x19\x81\xa4\x45\x9b\xc8\xfa\x18\x45\x35\xbb\x2f\xe3\x48\xfe\x49\x04\x2a\xd6\xd4\xda\xf4\x9f\xda\x5d\x4c\x24\x25\x47\xdd\x4a\xfc\x16\x0b\x8f\xcb\x4e\x0c\x1f\xc5\x81\x8a\x9c\x7d\x0c\xa6\xad\x3f\x38\x37\x82\x95\x77\xd3\xa0\x20\x8c\xd9\x5a\x79\x77\x0a\x15\x84\x95\x50\x5a\x12\x58\xb9\x40\x38\x29\x07\xe9\xec\x0b\xc6\x41\x70\xa7\xc0\x8a\x90\xf6\xc1\xf7\x89\xfc\x12\xd7\x71\x1e\x85\x46\x8b\x87\x06\x1a\xaf\xc1\xbe\x36\x64\x07\x56\x0d\xf4\xdd\x5d\xba\x35\xc0\x32\x4e\xe8\x9f\xf5\xfe\x6f\x13\xca\xbc\x7c\x7e\xd8\x37\x6b\x5a\xf7\x28\x58\x5e\x59\xfc\xba\x77\x74\xc8\x9a\x69\xe6\x27\x67\x99\x2c\xe3\x7c\x8e\x6f\xb4\xb5\xe4\xe3\x85\x9b\x0d\x58\x05\x1b\xf4\xe7\x6d\x6b\x6d\x25\xcd\x9f\xfa\x22\xfd\x86\x12\x6f\xf0\xf2\xd5\xad\x13\xb6\x21\x03\x2f\x86\x6a\xa9\xc3\x68\xc4\x82\x16\x79\x7e\x55\x5f\x40\x26\xd0\xff\x01\xeb\x2c\xdd\xa0\xec\xfa\xbc\x64\x97\xec\x67\x00\x00\x00\xff\xff\x49\x87\x55\x25\x95\x02\x00\x00")

func static_map_js() ([]byte, error) {
	return bindata_read(
		_static_map_js,
		"static/map.js",
	)
}

var _static_searchicon_png = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x05\x61\x0e\x36\x06\x06\x86\x95\xe2\x4b\xa7\x31\x30\x30\x30\x16\x07\xb9\x3b\x31\xac\x3b\x27\xf3\x92\x81\x81\x81\x25\xdd\xd1\xd7\x91\x81\x61\x63\x3f\xf7\x9f\x44\x56\x06\x06\x06\xce\x02\x8f\xc8\x62\x06\x06\xa1\x12\x10\x66\xbc\x97\x26\x5f\xc1\xc0\xc0\xc0\x94\xe4\xed\xee\xc2\xf0\xbf\xbd\xff\xcc\x7e\x90\x92\xb2\x02\xc7\x74\x06\x06\x46\x2d\x06\x06\x46\x4d\x86\x00\xb1\x54\x43\x06\x06\x06\xd5\x12\xd7\x88\x92\x94\xc4\x92\x54\xab\xe4\xa2\xd4\xc4\x92\x54\x06\x23\x03\x43\x63\x5d\x03\x13\x5d\x43\x83\x10\x03\x33\x2b\x53\x4b\x2b\x03\x73\x5d\x03\x73\x2b\x03\x83\x3e\xc7\xce\x40\x14\x0d\xb9\xf9\x29\x99\x69\x95\xb8\x35\xfc\x97\x31\x7c\xcb\xc0\xc0\x20\x09\xd2\x10\x9c\x9f\x56\x52\x9e\x58\x94\xca\x50\x5e\x5e\xae\x97\x99\x97\x5d\x9c\x9c\x58\x90\xaa\x97\x5f\x94\x3e\xfb\x9d\x8d\x14\x03\x03\x83\x20\x48\x51\x48\x66\x49\x4e\x2a\x43\x71\x6a\x62\x51\x72\x86\x6e\x66\x72\x7e\xde\xa1\xe6\x37\xb5\x0c\x0c\x4c\x5a\x9e\x2e\x8e\x21\x16\xfe\x4b\xa7\x78\xae\x7e\xe5\x20\xd0\xaa\xfd\x76\x8d\x42\xdf\x03\x2f\xc1\x70\xbd\xa9\x3a\x2c\x82\x47\xeb\xdf\x7a\x15\xb0\xb0\x1e\x5c\xba\x68\x51\xb4\xfa\x1c\x81\xe7\xbf\xdf\x69\x5e\x52\xbc\xb8\xe2\xc3\x3b\x76\x45\xcf\xf2\xaf\x2b\x5f\xad\x7a\x15\x56\x57\xa7\xc8\xfc\xfd\xf7\xdc\x65\x97\x35\xd7\x86\x69\x5b\xc9\xf5\xdb\x3c\x2b\xdb\xad\x29\xc1\x13\xa4\x34\xf1\xc1\xfb\xfc\x19\x2e\xec\xcd\x8c\xbd\xc7\x93\x8b\xac\xe6\xaa\xb4\x28\xb8\x06\x56\xc8\xa8\xf5\x1f\x6f\x5e\x77\x5d\xfb\x68\x92\xe1\xa9\x14\x23\x9b\x7f\x7c\xb1\x5b\x2e\xbf\xbc\x90\xb6\x59\xb1\xfd\xf0\x41\xe1\x0e\x09\x27\x86\x47\x65\xbb\xe7\xee\x37\xe4\x9b\x9d\xb4\xf1\xc4\xff\xb0\x0d\x1a\x4a\x73\xce\xa6\xc9\x2c\x14\xf1\x5e\x1a\x24\xc2\xd7\x6e\x99\x64\x21\xdd\xeb\x66\xc3\xfe\xf1\xf6\x5b\xb7\x46\x87\x86\x90\xd0\xab\x29\x67\x34\xf6\xb3\xd9\x4f\xf5\x6a\xb5\x91\xe3\xef\x56\x4c\xff\x59\x13\x37\xdb\xec\xf2\xeb\xaf\x19\x7b\xe3\x36\x7f\x78\x59\xb2\x28\x46\xef\xf8\xa3\xf3\x1c\x22\xac\x82\x4c\x1d\xfb\x84\x59\x6e\xe6\x4c\xcb\x4d\x6c\x17\x51\xf8\x1f\xc6\x11\x22\x19\x7d\xe4\xda\x86\xa7\xf9\x4b\x2e\x67\x6e\x3b\x3a\xeb\x69\xd1\xca\xde\x59\x82\x19\xd2\x22\x4c\xf7\x94\x27\x76\x98\xfd\x99\x17\xa0\x71\x64\x5b\x84\xf2\xee\x47\x92\x0b\x45\xe7\x4f\xd4\xfd\xc2\xe9\x92\x71\x24\x28\xc4\xcc\x98\x65\xfb\x6d\xdd\xfa\x7a\x26\x33\x23\x2f\x85\xe8\xb3\x1d\x07\x3c\x1b\xcd\x67\x9f\x3d\x96\xfb\xb9\xf7\x61\xc1\x09\x27\x81\xad\xab\x6c\x04\x3e\x56\xcc\xd1\x9b\xce\x9d\xcf\xfd\xf7\xfa\xfb\xef\x5b\x57\x86\x3f\x10\xb1\xd5\xe6\x9e\xed\xa3\xb6\x55\xd2\xf8\xd0\xeb\xaf\x41\x26\x52\xa9\x8e\x2e\x06\xf3\xcf\xaf\xbc\x99\x53\x64\xef\x55\xb6\x5b\xb6\x74\x77\xec\x2c\x1f\xb5\x3b\x41\x1d\x42\xfc\xd7\x22\x17\xca\x5f\xce\xda\xba\x6a\xbe\xc4\x12\x66\xbf\x14\x41\x01\xc9\x4b\xcd\xec\xcf\x8c\x96\xdf\x48\xdc\x19\x73\xad\x7f\xdb\x91\x92\x85\x5b\x6e\xe7\xea\xb1\x2c\xaa\x7c\xc7\x32\xe3\xa0\xe6\x3d\x81\x83\x36\x73\x1e\x4d\xd2\x9c\xea\xf5\xa4\x68\xa7\xc9\x69\xf5\xc0\x0d\x11\x3a\x3f\x96\x28\x94\x07\x49\x74\xff\xad\xb3\x97\xe7\x2b\xe1\x9e\xf3\x58\x57\xd9\x6e\xfe\xf9\x9a\x83\x0f\x56\x34\x8b\x07\x2a\x1b\xb0\x1d\xd3\x60\x28\xbb\x9c\xb5\x35\xae\x85\xbb\x95\xe9\x67\xcd\xbe\xf3\x8b\xe6\xdf\x78\xff\xfd\x4a\x86\x89\xcf\xa1\x1d\x29\x02\x1f\xeb\xbb\x9b\x0e\x3f\x74\xf8\x5a\x15\x2b\xee\x36\x2b\xe0\x85\x7d\x27\xd3\x1d\xd9\xad\x51\xbe\xfb\x5f\x5e\xd0\xac\x17\x63\x3d\xa1\xfe\x4b\x62\xee\x82\x55\x5a\x7f\x99\xb9\x97\xa7\x6e\xa9\xeb\xda\x7c\x8e\x81\x81\x81\xc1\xd3\xd5\xcf\x65\x9d\x53\x42\x13\x20\x00\x00\xff\xff\x2b\x20\x37\xe6\x5c\x03\x00\x00")

func static_searchicon_png() ([]byte, error) {
	return bindata_read(
		_static_searchicon_png,
		"static/searchicon.png",
	)
}

var _static_style_css = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x5f\x4f\xdb\x3e\x14\x7d\xef\xa7\xb8\x52\x85\x80\xaa\xa1\x4d\x69\x8b\x7e\xe6\x09\xfd\x80\x69\x6f\x7b\x40\x7b\x77\xe2\xdb\xc4\xc2\xb1\x2d\xfb\x96\x06\x26\xbe\xfb\x64\x3b\x09\x2d\xed\x36\x4d\x9a\x9f\x9c\xfb\xe7\xd8\xf7\x9c\x13\x13\x2f\x14\x5e\x15\x6a\x8b\x4f\x61\x07\x3f\x46\x00\x1b\xa3\x29\xdb\xf0\x46\xaa\x57\x06\xdf\xd1\x09\xae\xf9\x14\xbe\xa0\xc6\x17\x3e\x05\xcf\xb5\xcf\x3c\x3a\xb9\xb9\x1d\x01\x14\xc6\x09\x74\x0c\x72\xdb\x82\x37\x4a\x0a\x18\xe7\xff\xaf\x1f\xee\x96\x31\xc9\xcb\xe7\xca\x99\xad\x16\x59\x69\x94\x71\x0c\xc6\x0f\x71\x85\xe4\x4e\x0a\xaa\x19\xdc\xac\xce\xc2\x17\x61\x4b\x19\x57\xb2\xd2\x0c\x14\x6e\xe8\x03\x3b\xb4\x2a\x6e\x3d\x32\xe8\x77\xb7\xa3\xf7\xd1\xe8\xf3\xcd\x49\x4c\x8f\x63\x75\x1c\xe8\xc4\x25\xef\xe2\x0a\xa7\x58\x2e\x84\xd4\x15\x83\x6b\xdb\xc2\xc2\xb6\xa7\xc1\x0b\x23\x5e\x81\xc4\x07\x3f\x5e\xbe\x21\x83\xfc\xfa\x57\x0d\x8e\x69\xaa\xb3\xb2\x96\x4a\x5c\xe0\x0b\xea\xcb\x74\x93\x81\x11\x06\xe3\xfb\xf9\xc3\xf2\x71\x75\xba\xbd\x46\x2e\x8e\x3b\x4e\x51\xcb\x20\x6b\xcc\x5b\xa6\xa4\x46\xee\xb2\xca\x71\x21\x51\xd3\x05\x19\x3b\x85\xf1\x6a\xf5\xdf\xa2\x28\x60\x7e\x36\x85\xf1\xf5\xe2\xa6\xe4\x02\xd6\xeb\xf0\x91\x90\x20\x9f\xcf\xcf\x2e\x8f\xf0\x76\x58\x3c\x4b\xfa\x97\x90\xc7\x50\x50\x18\x22\xd3\xfc\x15\x60\xf2\x43\x6a\x64\x41\xab\x5e\xcd\x65\x5c\xbf\x61\xb2\x33\xc2\xbe\x72\xab\xa0\x5c\x17\xda\xa1\xac\x6a\x62\x50\x18\x25\x42\xb0\x77\xeb\x63\x5c\x7b\x67\x07\x6b\x1e\x9c\xfc\x47\x0d\xa9\x66\x1b\xe9\x3c\x25\x2b\xec\xd9\xb1\xc3\xd2\x46\x27\x3f\x4b\x6d\xb7\x74\xe5\x91\xbb\xb2\x7e\xc2\x96\x3e\xa9\x9f\xc9\x86\x57\xc8\x60\xeb\xd4\xc5\xf9\xcc\x13\x27\x59\xce\x52\xb5\x2c\x8d\xbe\xb2\xba\x3a\x8f\x2c\xcd\x26\x70\x27\x04\x70\x48\x49\x08\x59\x20\x03\x11\x1f\x26\xb3\x43\x54\x6b\xbc\x24\x69\x34\x83\x7c\x6e\x5b\xc8\x17\x89\x95\xd9\x04\xbe\x75\x99\x30\xc7\x01\xd6\x67\x08\x87\x16\x79\x9c\xa4\xdb\x76\x00\xf7\x06\xb4\x21\x48\xb1\x88\x12\xdb\xe3\x1c\x09\xe4\xf0\x09\x98\x4d\xe0\x71\xab\x54\x16\xa3\xa9\x60\x5f\xaf\xf5\x70\xb3\xaf\xba\x74\xc8\x3d\x7e\xa4\x53\xf5\xf0\x27\x87\x29\x60\xd1\xcf\x03\xcb\xf9\xd0\x1a\x98\xf1\xa6\xc1\xbe\xb6\x1b\xe6\xf8\x7d\x10\x42\x1c\x90\x59\x39\x7c\xed\xea\x52\x4f\xc3\x5d\x25\xf5\x60\xc6\x3d\xe2\x86\x33\xbc\xe5\x25\x42\x81\xca\xec\xd2\xf8\xbd\x02\xef\xa3\x9f\x01\x00\x00\xff\xff\x8d\xba\x6b\xd2\x77\x05\x00\x00")

func static_style_css() ([]byte, error) {
	return bindata_read(
		_static_style_css,
		"static/style.css",
	)
}

var _templates_list_gohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x4d\x8f\x9b\x30\x10\xbd\xef\xaf\x98\x5a\x7b\x68\xa5\x80\x95\x5b\x55\xd9\x5c\xfa\x71\xaa\xd4\x6a\x37\x3d\xf4\xe8\x98\xc9\xda\x8d\x63\x23\x7b\x48\x8a\x10\xff\xbd\x32\xe4\x03\x12\x95\x0b\x33\xf3\xc6\x6f\x9e\x1f\x83\x78\xf7\xe5\xc7\xe7\xcd\xef\x9f\x5f\xc1\xd0\xc1\x55\x4f\x22\xbf\xc0\x29\xff\x26\x19\x7a\x56\x3d\x01\x00\x08\x83\xaa\x9e\xc2\x31\x3d\x20\x29\xd0\x46\xc5\x84\x24\x59\x4b\xbb\xe2\x23\xbb\x87\xbd\x3a\xa0\x64\x47\x8b\xa7\x26\x44\x62\xa0\x83\x27\xf4\x24\xd9\xc9\xd6\x64\x64\x8d\x47\xab\xb1\x18\x93\x15\x58\x6f\xc9\x2a\x57\x24\xad\x1c\xca\xf5\x0a\x92\x89\xd6\xef\x0b\x0a\xc5\xce\x92\xf4\x61\x4e\x4f\x96\x1c\x56\xaf\x26\x44\xd2\x2d\x25\xc1\xa7\xc2\xad\xc1\x59\xbf\x87\x88\x4e\xb2\x44\x9d\xc3\x64\x10\x89\x81\x89\xb8\x93\x8c\x27\x52\x64\x35\x1f\x91\x52\xa7\x34\x67\x4e\x3a\xda\x86\x20\x45\x7d\x6b\x3c\xa8\xa6\xfc\x93\x58\x25\xf8\x84\x9e\x1d\xe1\x37\x4b\xc4\x36\xd4\xdd\x85\x45\x98\xf5\x5c\x9a\x59\x5f\x01\xeb\x9b\x96\x80\xba\x06\x25\x23\xfc\x9b\x2d\x71\x2a\x25\xc9\x12\xaa\xa8\xcd\x66\x2c\xd9\x7a\x99\x07\xbf\xc7\xae\x6d\x24\xdb\x59\x47\x18\x5f\xc2\x29\xbd\xff\xc0\xa0\x71\x4a\xa3\x09\xae\xc6\x28\xd9\xeb\xd8\x0f\xe9\x32\xb5\x2c\xaf\x77\x12\xa4\xb6\x0e\x2f\x83\xb6\xae\xc5\x4d\x2e\x9c\xe7\x4c\xf1\xdc\xd9\xe5\x77\xce\x95\xb8\x4c\xcd\xf5\x72\x82\x93\xb9\xc7\xbe\xb5\xce\xc1\xaf\x97\xef\x0f\x18\x9f\xf3\x64\x74\xb9\x4f\x34\x77\x30\x3f\x7d\x1f\x95\x7f\x43\x78\xde\x63\xb7\x82\xe7\xa3\x72\x2d\xc2\x27\x09\xe5\x30\xfc\x5f\x5d\x2e\xd4\x55\xdf\xe7\x43\xc3\x20\x38\xd5\x8f\xa8\x50\xe7\x3d\xe8\xfb\x89\x75\x18\x58\x75\x8b\x05\x57\xd5\xfd\xc1\xa5\xf8\xac\x0d\x7d\x3d\xd3\x21\xf8\x42\xbe\xe0\xa3\xe7\x97\x35\x99\x20\xc1\xa7\xbf\xeb\x5f\x00\x00\x00\xff\xff\x86\x85\xa3\x72\x6e\x03\x00\x00")

func templates_list_gohtml() ([]byte, error) {
	return bindata_read(
		_templates_list_gohtml,
		"templates/list.gohtml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"static/map.js":         static_map_js,
	"static/searchicon.png": static_searchicon_png,
	"static/style.css":      static_style_css,
	"templates/list.gohtml": templates_list_gohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"map.js":         &_bintree_t{static_map_js, map[string]*_bintree_t{}},
		"searchicon.png": &_bintree_t{static_searchicon_png, map[string]*_bintree_t{}},
		"style.css":      &_bintree_t{static_style_css, map[string]*_bintree_t{}},
	}},
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"list.gohtml": &_bintree_t{templates_list_gohtml, map[string]*_bintree_t{}},
	}},
}}
