package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _static_map_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\xdb\x46\x10\xbd\xf3\x2b\x1e\x74\x48\x29\x9b\x91\xec\xab\x1d\x05\xa8\xed\xa0\x0d\xe0\xb8\x40\xe3\xf6\x62\xf8\xb0\x22\x47\xe2\x42\xd4\xae\xba\x3b\x8c\x44\x34\xfe\xf7\x62\x76\x49\x8a\x4c\xa3\xb4\xb9\x25\x07\x43\xe1\xce\x9b\x7d\x6f\x66\xde\xec\xaa\x36\x39\x6b\x6b\xb0\xd2\x15\x93\xfb\xdd\xee\x7d\x3a\xc5\xdf\x09\x30\x9f\xe3\x8e\xf2\x4a\x39\xc2\x27\xe5\xb4\x5a\x56\xe4\x13\xc8\x6f\x68\xb3\xab\x39\x6b\x21\x19\x58\xce\x32\xb0\xfc\x2c\x32\xe8\x0c\x7c\xe0\x3f\x55\x55\xd3\x75\x82\x18\x8c\x05\x0a\x9b\xd7\x5b\x32\x3c\x5b\x13\xbf\xab\x48\x7e\xde\x34\xef\x8b\x74\xe2\x49\xb9\xbc\x7c\xa4\x03\x4f\xa6\x02\x88\x69\xb1\x88\xc8\xd9\x27\x49\x34\x63\xfb\xc7\x6e\x47\xee\x56\x79\x4a\x43\x54\xb8\xf4\x9b\x69\x1f\x25\x22\xa6\x64\x49\x17\x10\x83\x30\x7f\xd3\x3c\xaa\xf5\x83\xda\x52\x3a\x61\x27\x81\x51\xf5\xbd\xb5\x3b\x70\xe9\x6c\xbd\x2e\xa1\xaa\xaa\xbd\xca\xd9\xbd\xcf\xa0\x4c\x81\x52\x17\x04\x2e\xad\x27\xec\x4b\x8b\xc2\x9a\x9f\x18\x5b\xc5\x79\x09\x2e\x09\x51\x0f\xfe\xaa\xc9\x35\x22\xc7\x3a\xa4\x1a\x0b\x5c\x5c\x43\xe3\x0d\xd8\xcd\x2a\x32\x6b\x2e\xaf\xa1\xcf\xcf\x63\xad\x01\x2e\x84\xa1\x7b\xd2\xcf\xa7\x18\x16\x93\xe9\xd3\xc5\xf3\x75\x88\xd6\x2b\xa4\x5c\x74\x58\xf4\xf5\x96\x1c\xc5\x8c\xe9\xc0\xb7\xd6\x30\x19\xc6\xe7\xcf\xf2\x45\x1b\x43\x4e\x2a\x7c\xdd\x02\x42\x82\x16\x34\xae\xed\x4c\x9b\x82\x0e\xbf\xad\xd2\xd8\x86\x29\xde\xe2\xf5\xe5\xf1\x26\xb4\x24\x3d\x37\x15\xcd\x0a\xed\x77\x95\x6a\xb0\xc0\x64\xd2\xa5\x7e\x01\x55\x9e\xfe\x1b\x60\xac\xa1\x23\x28\xe9\xfe\xbe\x24\x2f\x49\xd2\x4f\xa5\xb7\x8e\x43\x1f\x53\x13\x39\xc8\xf8\xb5\xf3\x16\x1b\xe2\xf7\x9a\xf3\x52\x9b\x75\x18\xbc\x43\x86\x26\x83\x2f\x6d\x5d\x15\x1f\xc3\x49\x86\x42\xbb\x2e\x2c\xb7\xb5\xe1\xd0\x8a\xef\x9d\xa0\xfe\x9a\xd0\xa6\x38\xd9\xf3\x39\x3e\x12\xc7\x9e\x5b\xc7\x72\x58\x68\x47\x91\x39\x5b\x28\x9f\x93\x29\xb4\x59\x5f\x25\x90\x13\x51\xad\x7c\x1e\x44\xcf\xcf\xf0\x41\x6d\x08\x0a\x55\x1c\x37\xc5\xd8\xeb\xaa\x42\x6e\x0d\x6b\x53\x13\x6a\xc3\xba\x4a\x00\x63\x07\x97\x97\xca\x63\x49\x64\x64\xe8\xe8\x0a\x67\xf3\x04\xd8\x97\xba\x22\xa4\x7d\x50\xd7\x2c\xa1\xc7\xca\x31\x96\x0d\xbc\x6a\x84\xc7\x38\x99\xf6\x31\x4d\x88\x1e\x0a\x5c\xa9\xca\x53\x6c\x8d\x14\xb9\xf7\x8e\xfc\x27\x7e\x9e\x9f\x7d\xcb\x26\x48\xe9\x90\xd3\x2e\x94\x26\x84\xaf\xb4\xf3\x9c\x09\xd3\xbc\x0c\x0a\x95\x36\xbe\x05\x94\xa4\x0a\x72\x7e\xda\xaa\x19\x18\xe6\x32\x1a\x26\x95\x94\xad\x67\xf0\x1a\x97\xd3\x91\x71\xbe\xa6\x53\xee\x75\xd4\x8e\x01\x96\x34\x92\x7d\xd5\xc2\x86\x43\x32\xd6\x1c\xe4\xfd\xd2\x76\x96\xf7\x16\xd4\xda\x11\x8d\xad\xb1\x57\x86\xa5\xbb\xb9\xdd\xee\x94\xa3\xac\x85\x58\x43\x58\x39\xbb\x45\x5e\x3b\x27\xce\x73\x76\x1f\xb6\x45\x7f\x20\xd9\x0c\x1d\xb8\x17\x0a\x1c\xb0\x08\x05\x3b\x6d\xfb\xc7\xbb\xc9\xf4\xc9\x3c\x77\xc4\x9a\x1e\x80\x73\x5c\xfe\x4f\xd0\xfc\x0c\xb7\x25\xe5\x1b\x71\x7d\x27\x29\xb4\xa9\x2d\x50\x2c\x0d\x76\x95\xca\x7b\x39\x4b\xe5\x49\xb8\x07\x40\x3f\xd5\x99\xcc\x34\xac\x43\x41\x3e\x1f\xe8\x90\x75\x12\x06\xbc\x9d\xf0\xe1\xbe\x90\xb3\x43\xdc\x40\xbf\x3e\x7e\xb8\x9f\xb1\xbd\xb7\xfb\x6e\xdb\xe0\x2d\x9a\x53\x67\xc3\x24\xa1\xcb\xef\x57\xf0\x36\xc3\x56\xb9\x0d\x94\x87\xea\x88\x4b\x95\x97\x8e\xd4\x26\x90\x15\x3f\x5d\x0d\x80\x5f\xf4\xb9\x33\x6f\xf7\x2f\x00\x8f\x1f\x5e\xc6\x5b\x6c\x28\x4c\x34\x7f\x87\xb2\x37\x3f\xaa\xb2\xe4\xf8\x57\x14\x0c\xb3\x0c\x4c\x75\x26\xa4\x7a\x22\xfd\xde\x11\x8a\x54\x08\xd5\x0d\xc5\xcd\x17\x02\x5a\x94\xf0\x0d\x22\xc2\x3e\xfb\x37\x7a\xb0\xb5\xba\xe5\x22\xa3\x2f\x3e\x32\xfc\x60\x0b\x9a\x69\xe3\xc9\xf1\x0d\xad\xac\xa3\x74\x30\xe9\x59\x17\x3c\xed\x14\x7d\x6d\x23\xb7\xe5\x7c\xa7\xe4\x29\xd6\x5b\x3a\x52\x68\x77\x5d\x06\x6d\x72\x47\xca\x0b\x79\xed\x11\x1f\x84\x65\x83\xcb\xab\x51\xda\xf0\xfd\xfc\x3c\xe6\xfc\xe2\x45\x8b\xa5\x39\xbd\x96\xf1\xf3\xc3\xdd\xd8\x36\x72\x7b\xf0\x45\xe7\x2e\xdf\x2e\x97\xd1\x73\x11\x07\x2c\xd4\xd0\xd5\xd1\x78\x71\xb5\x87\x17\x42\xad\x95\x36\xb3\xb1\xe5\x46\x8f\xda\x02\x17\x78\xf5\x0a\xa7\x6c\xd8\xbe\x3f\xe1\x8e\xe3\x50\x9c\x2a\xe2\xf8\x3d\xfe\x27\x00\x00\xff\xff\x05\x9b\x7e\xa4\x25\x0a\x00\x00")

func static_map_js() ([]byte, error) {
	return bindata_read(
		_static_map_js,
		"static/map.js",
	)
}

var _static_searchicon_png = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x05\x61\x0e\x36\x06\x06\x86\x95\xe2\x4b\xa7\x31\x30\x30\x30\x16\x07\xb9\x3b\x31\xac\x3b\x27\xf3\x92\x81\x81\x81\x25\xdd\xd1\xd7\x91\x81\x61\x63\x3f\xf7\x9f\x44\x56\x06\x06\x06\xce\x02\x8f\xc8\x62\x06\x06\xa1\x12\x10\x66\xbc\x97\x26\x5f\xc1\xc0\xc0\xc0\x94\xe4\xed\xee\xc2\xf0\xbf\xbd\xff\xcc\x7e\x90\x92\xb2\x02\xc7\x74\x06\x06\x46\x2d\x06\x06\x46\x4d\x86\x00\xb1\x54\x43\x06\x06\x06\xd5\x12\xd7\x88\x92\x94\xc4\x92\x54\xab\xe4\xa2\xd4\xc4\x92\x54\x06\x23\x03\x43\x63\x5d\x03\x13\x5d\x43\x83\x10\x03\x33\x2b\x53\x4b\x2b\x03\x73\x5d\x03\x73\x2b\x03\x83\x3e\xc7\xce\x40\x14\x0d\xb9\xf9\x29\x99\x69\x95\xb8\x35\xfc\x97\x31\x7c\xcb\xc0\xc0\x20\x09\xd2\x10\x9c\x9f\x56\x52\x9e\x58\x94\xca\x50\x5e\x5e\xae\x97\x99\x97\x5d\x9c\x9c\x58\x90\xaa\x97\x5f\x94\x3e\xfb\x9d\x8d\x14\x03\x03\x83\x20\x48\x51\x48\x66\x49\x4e\x2a\x43\x71\x6a\x62\x51\x72\x86\x6e\x66\x72\x7e\xde\xa1\xe6\x37\xb5\x0c\x0c\x4c\x5a\x9e\x2e\x8e\x21\x16\xfe\x4b\xa7\x78\xae\x7e\xe5\x20\xd0\xaa\xfd\x76\x8d\x42\xdf\x03\x2f\xc1\x70\xbd\xa9\x3a\x2c\x82\x47\xeb\xdf\x7a\x15\xb0\xb0\x1e\x5c\xba\x68\x51\xb4\xfa\x1c\x81\xe7\xbf\xdf\x69\x5e\x52\xbc\xb8\xe2\xc3\x3b\x76\x45\xcf\xf2\xaf\x2b\x5f\xad\x7a\x15\x56\x57\xa7\xc8\xfc\xfd\xf7\xdc\x65\x97\x35\xd7\x86\x69\x5b\xc9\xf5\xdb\x3c\x2b\xdb\xad\x29\xc1\x13\xa4\x34\xf1\xc1\xfb\xfc\x19\x2e\xec\xcd\x8c\xbd\xc7\x93\x8b\xac\xe6\xaa\xb4\x28\xb8\x06\x56\xc8\xa8\xf5\x1f\x6f\x5e\x77\x5d\xfb\x68\x92\xe1\xa9\x14\x23\x9b\x7f\x7c\xb1\x5b\x2e\xbf\xbc\x90\xb6\x59\xb1\xfd\xf0\x41\xe1\x0e\x09\x27\x86\x47\x65\xbb\xe7\xee\x37\xe4\x9b\x9d\xb4\xf1\xc4\xff\xb0\x0d\x1a\x4a\x73\xce\xa6\xc9\x2c\x14\xf1\x5e\x1a\x24\xc2\xd7\x6e\x99\x64\x21\xdd\xeb\x66\xc3\xfe\xf1\xf6\x5b\xb7\x46\x87\x86\x90\xd0\xab\x29\x67\x34\xf6\xb3\xd9\x4f\xf5\x6a\xb5\x91\xe3\xef\x56\x4c\xff\x59\x13\x37\xdb\xec\xf2\xeb\xaf\x19\x7b\xe3\x36\x7f\x78\x59\xb2\x28\x46\xef\xf8\xa3\xf3\x1c\x22\xac\x82\x4c\x1d\xfb\x84\x59\x6e\xe6\x4c\xcb\x4d\x6c\x17\x51\xf8\x1f\xc6\x11\x22\x19\x7d\xe4\xda\x86\xa7\xf9\x4b\x2e\x67\x6e\x3b\x3a\xeb\x69\xd1\xca\xde\x59\x82\x19\xd2\x22\x4c\xf7\x94\x27\x76\x98\xfd\x99\x17\xa0\x71\x64\x5b\x84\xf2\xee\x47\x92\x0b\x45\xe7\x4f\xd4\xfd\xc2\xe9\x92\x71\x24\x28\xc4\xcc\x98\x65\xfb\x6d\xdd\xfa\x7a\x26\x33\x23\x2f\x85\xe8\xb3\x1d\x07\x3c\x1b\xcd\x67\x9f\x3d\x96\xfb\xb9\xf7\x61\xc1\x09\x27\x81\xad\xab\x6c\x04\x3e\x56\xcc\xd1\x9b\xce\x9d\xcf\xfd\xf7\xfa\xfb\xef\x5b\x57\x86\x3f\x10\xb1\xd5\xe6\x9e\xed\xa3\xb6\x55\xd2\xf8\xd0\xeb\xaf\x41\x26\x52\xa9\x8e\x2e\x06\xf3\xcf\xaf\xbc\x99\x53\x64\xef\x55\xb6\x5b\xb6\x74\x77\xec\x2c\x1f\xb5\x3b\x41\x1d\x42\xfc\xd7\x22\x17\xca\x5f\xce\xda\xba\x6a\xbe\xc4\x12\x66\xbf\x14\x41\x01\xc9\x4b\xcd\xec\xcf\x8c\x96\xdf\x48\xdc\x19\x73\xad\x7f\xdb\x91\x92\x85\x5b\x6e\xe7\xea\xb1\x2c\xaa\x7c\xc7\x32\xe3\xa0\xe6\x3d\x81\x83\x36\x73\x1e\x4d\xd2\x9c\xea\xf5\xa4\x68\xa7\xc9\x69\xf5\xc0\x0d\x11\x3a\x3f\x96\x28\x94\x07\x49\x74\xff\xad\xb3\x97\xe7\x2b\xe1\x9e\xf3\x58\x57\xd9\x6e\xfe\xf9\x9a\x83\x0f\x56\x34\x8b\x07\x2a\x1b\xb0\x1d\xd3\x60\x28\xbb\x9c\xb5\x35\xae\x85\xbb\x95\xe9\x67\xcd\xbe\xf3\x8b\xe6\xdf\x78\xff\xfd\x4a\x86\x89\xcf\xa1\x1d\x29\x02\x1f\xeb\xbb\x9b\x0e\x3f\x74\xf8\x5a\x15\x2b\xee\x36\x2b\xe0\x85\x7d\x27\xd3\x1d\xd9\xad\x51\xbe\xfb\x5f\x5e\xd0\xac\x17\x63\x3d\xa1\xfe\x4b\x62\xee\x82\x55\x5a\x7f\x99\xb9\x97\xa7\x6e\xa9\xeb\xda\x7c\x8e\x81\x81\x81\xc1\xd3\xd5\xcf\x65\x9d\x53\x42\x13\x20\x00\x00\xff\xff\x2b\x20\x37\xe6\x5c\x03\x00\x00")

func static_searchicon_png() ([]byte, error) {
	return bindata_read(
		_static_searchicon_png,
		"static/searchicon.png",
	)
}

var _static_style_css = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcd\x6e\xe2\x30\x10\xbe\xe7\x29\x46\x42\x55\x7f\x84\x21\xa1\x40\x77\xcd\xa9\xda\xb6\xfb\x02\xd5\xde\x9d\x78\x92\x58\x75\x6c\xcb\x31\x90\x76\xb5\xef\xbe\xb2\x5d\x20\x04\xa8\xb4\xd2\x3a\x17\x67\x3c\xdf\x8c\xc7\xdf\x7c\xe3\x58\x2e\x71\x92\xcb\x35\xbe\xfa\x1d\xfc\x4e\x00\x4a\xad\x1c\x29\x59\x23\xe4\x3b\x85\x5f\x68\x39\x53\x6c\x0c\x3f\x51\xe1\x86\x8d\xa1\x65\xaa\x25\x2d\x5a\x51\xae\x12\x80\x5c\x5b\x8e\x96\x42\x66\x3a\x68\xb5\x14\x1c\x46\xd9\x8f\xe5\xf3\xe3\xdc\x1f\x36\xcc\x56\x42\x11\x2b\xaa\xda\x51\x98\xa7\xa6\xf3\xd6\xe9\x1d\xe4\xac\x78\xab\xac\x5e\x2b\x4e\x0a\x2d\xb5\xa5\x30\x7a\x0e\x6b\x05\x77\xd3\x04\x60\x2b\xb8\xab\x29\x3c\x2c\xae\x3c\xc0\x61\xe7\x08\x93\xa2\x52\x14\x24\x96\xee\x90\xd7\xa3\x25\x33\x2d\x52\xd8\xed\x56\xc9\x9f\x24\x19\x56\xe5\xf8\xf8\xd4\x56\x87\x62\x0d\xe3\x5c\xa8\x8a\xc2\xbd\xe9\x60\xe6\x6f\x78\x0e\x1f\x7d\xcf\x14\xfb\x18\xd6\x85\xa4\x3d\x10\xc9\xb5\x73\xba\x39\xc2\x72\xce\xcf\x03\x73\xcd\xdf\x77\xf0\x40\x46\x2b\x3e\x90\x42\xb6\xbc\x74\x3d\x4b\x95\x76\x37\x13\x57\x23\xe3\xb7\xb4\xd6\x1b\xb4\x31\xf7\xe9\x3b\x97\x99\xff\x2e\x54\x89\x8c\x0f\x70\xb4\xcf\x67\xdf\x4c\x1a\xfd\x41\xa4\x50\xc8\x2c\xa9\x2c\xe3\x02\x95\xbb\x71\xda\x8c\x61\xb4\x58\x7c\x9f\xe5\x39\xa4\x57\x63\x18\xdd\xcf\x1e\x0a\xc6\x61\xb9\xf4\x3f\x31\x12\x64\x69\x7a\x75\x7b\x12\x6f\x8b\xf9\x9b\x70\xff\x33\xe4\x69\x28\x88\x2c\xfc\x53\xc0\x63\xfa\x66\x07\xfa\xe6\x61\x7d\xf1\x92\x9f\x5d\xd3\x67\xf0\x5b\x94\x40\x30\x6d\x31\xea\x22\xd7\x92\x7b\xe3\x8e\xa1\x97\xb0\x7a\xb9\x7d\xcf\x1f\x65\x7e\x4a\x9f\xe7\x2f\x8b\x2f\x33\xd3\x52\xd8\xd6\x91\xa2\x16\xf2\xa8\x0d\x63\x2c\xa5\x55\x14\xca\xa4\x61\x42\x3d\x89\x4d\x70\xb9\xac\xba\x02\x95\x43\x1b\x11\x6a\xdd\x04\xef\xfe\x79\x50\x78\x38\x16\xca\xac\xdd\xa4\x45\x66\x8b\xfa\x15\x3b\x37\x6c\x43\xd1\xb0\x0a\x29\xac\xad\xbc\xb9\x9e\xb6\x8e\x39\x51\x4c\xa3\xb7\x28\xb4\x9a\x18\x55\x5d\x0f\x78\x24\x46\xb7\xc2\x09\xad\x28\x64\xa9\xe9\x20\x9b\xc5\x37\xec\x79\x58\x34\xc8\x42\x59\x9f\xdb\xd5\xa1\x1a\x4f\xe4\xea\x9c\x8e\xf6\xd2\x27\x4e\x1b\xba\x0f\xbb\x33\xee\xf5\x3a\xb0\xc7\x07\xdc\xcd\xb2\x33\x13\x21\xa8\x7a\x3f\xfb\x86\x61\x72\xdd\xf9\x5b\x84\x89\xb3\x6f\xad\xa0\xea\xbf\x01\x00\x00\xff\xff\xc7\x0d\x3d\x8e\x8a\x05\x00\x00")

func static_style_css() ([]byte, error) {
	return bindata_read(
		_static_style_css,
		"static/style.css",
	)
}

var _templates_list_gohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x3d\x6f\xdb\x3c\x10\xde\xf3\x2b\xf8\x72\x8a\x81\x58\x7c\xdd\xa9\x03\xa9\x25\x69\xa7\x02\x0d\x92\xb4\x40\x47\x9a\x3c\x87\x57\x53\xa4\x40\x9e\xec\x1a\x82\xfe\x7b\x21\xc9\xb2\xa5\xa4\x43\xb4\xe8\xee\x9e\xfb\x7c\xee\x40\xf9\xdf\xc3\xf7\xfb\x97\x5f\x8f\x5f\x98\xa3\xca\x97\x37\xb2\xff\x31\xaf\xc3\xab\xe2\x10\x78\x79\xc3\x18\x63\xd2\x81\xb6\xa3\x38\xa8\x15\x90\x66\xc6\xe9\x94\x81\x14\x6f\x68\xb7\xfe\xcc\xdf\xc2\x41\x57\xa0\xf8\x01\xe1\x58\xc7\x44\x9c\x99\x18\x08\x02\x29\x7e\x44\x4b\x4e\x59\x38\xa0\x81\xf5\xa0\xdc\x31\x0c\x48\xa8\xfd\x3a\x1b\xed\x41\x6d\xee\x58\x76\x09\xc3\x7e\x4d\x71\xbd\x43\x52\x21\xce\xd3\x13\x92\x87\xf2\xd9\xc5\x44\xa6\xa1\x2c\xc5\x68\xb8\x3a\x78\x0c\x7b\x96\xc0\x2b\x9e\xe9\xe4\x21\x3b\x00\xe2\xcc\x25\xd8\x29\x2e\x32\x69\x42\x23\x06\xa4\x30\x39\xcf\x33\x67\x93\xb0\x26\x96\x93\xb9\x3a\x56\xba\x2e\x7e\x67\x5e\x4a\x31\xa2\x67\x46\xc4\x95\x12\xb9\x8d\xf6\x34\x65\x91\x16\x0f\xcc\x78\x9d\xb3\xe2\x95\xc6\xf0\x80\x87\x79\x05\xb7\x99\x37\xee\x36\x33\x08\x43\xdd\x10\xa3\x53\x0d\x8a\x13\xfc\xe9\x29\x1b\xd3\x64\xd0\xc9\xb8\x97\xc1\x84\x76\xa9\xc7\xb0\x87\x53\x53\x2b\xbe\x43\x4f\x90\x9e\xe2\x31\xdf\xae\x38\xab\xbd\x36\xe0\xa2\xb7\x90\x14\x7f\x1e\xfc\x59\x9e\xea\x16\xc5\xa5\x23\x29\x2c\x1e\x2e\x0a\xe9\xad\x87\xa9\xea\xd6\x37\xf0\xd2\x1b\xce\x45\x47\x79\xbe\x86\xe5\x51\xf4\x96\x34\x05\x0f\x18\x5f\x82\x8e\xc5\x60\x3c\x9a\xbd\xe2\x39\x26\x1a\xf2\xdd\xfe\xbf\xe2\x17\x42\xa4\x20\xf7\x81\x90\xcd\x8a\x97\x5f\x1b\xef\xd9\x8f\xa7\x6f\x1f\x0c\xf9\xb4\xe2\xe5\x4f\xcc\x38\x1c\xcb\x32\x40\x50\x9a\xcd\x24\xde\x0c\x25\x69\xbe\xdb\xfe\x6b\xdb\xa4\xc3\x2b\xb0\xa2\xeb\x96\xa3\xcf\x9d\x7a\x83\x2d\xdb\xb6\x78\xd4\xe4\xba\x4e\x0a\xb2\xef\x61\xa9\xcf\x27\xd9\xb6\xc5\x33\x12\x74\x1d\x2f\x2f\xa2\x14\xba\xfc\x67\xd8\xc4\x70\x68\xaa\xc1\xfd\x3e\x36\x81\xde\x97\x58\xce\xd5\xb7\x0d\xc1\xce\x5a\x96\x62\x31\x99\x14\xc3\xee\xa7\xdb\x1e\x21\x29\xc6\x27\xe1\x6f\x00\x00\x00\xff\xff\xdb\x54\x14\xfd\x23\x04\x00\x00")

func templates_list_gohtml() ([]byte, error) {
	return bindata_read(
		_templates_list_gohtml,
		"templates/list.gohtml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"static/map.js":         static_map_js,
	"static/searchicon.png": static_searchicon_png,
	"static/style.css":      static_style_css,
	"templates/list.gohtml": templates_list_gohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"map.js":         &_bintree_t{static_map_js, map[string]*_bintree_t{}},
		"searchicon.png": &_bintree_t{static_searchicon_png, map[string]*_bintree_t{}},
		"style.css":      &_bintree_t{static_style_css, map[string]*_bintree_t{}},
	}},
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"list.gohtml": &_bintree_t{templates_list_gohtml, map[string]*_bintree_t{}},
	}},
}}
