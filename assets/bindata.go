package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _static_style_css = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\xae\xda\x30\x10\xbc\xe7\x2b\x56\x8a\x90\xde\x93\xe2\x2a\x01\xc2\x53\xcd\x09\xb5\xd0\x1f\xa8\x7a\xb7\xe3\x4d\x62\x61\xec\xc8\x59\x20\x50\xf5\xdf\x2b\x27\x50\x68\x93\xb6\xaa\xd4\x3d\xd9\x6b\xcd\xec\x7a\x66\x48\x48\x83\xef\xa4\x39\xe2\xe7\x70\x82\xaf\x11\x40\xe9\x2c\xb1\x52\x1c\xb4\xb9\x70\xf8\x82\x5e\x09\x2b\x12\xf8\x84\x16\x4f\x22\x81\x56\xd8\x96\xb5\xe8\x75\xb9\x8e\x00\xa4\xf3\x0a\x3d\x87\xac\xe9\xa0\x75\x46\x2b\x88\xb3\x0f\xab\xed\x66\xd9\x3f\x8a\x62\x5f\x79\x77\xb4\x8a\x15\xce\x38\xcf\x21\xde\xf6\x15\x1e\xcf\x5a\x51\xcd\xe1\x2d\x9f\x85\x1b\x61\x47\x4c\x18\x5d\x59\x0e\x06\x4b\x7a\x70\x07\xa8\x11\x4d\x8b\x1c\xee\xa7\x75\xf4\x2d\x8a\x7e\xdd\x9c\x54\x32\xee\xd5\xfd\x87\x26\x96\xdc\xf4\x15\xa6\x34\x42\x29\x6d\x2b\x0e\x8b\xa6\x83\x79\xd3\x4d\x93\x4b\xa7\x2e\x40\xea\xa1\x4f\xab\xaf\xc8\x21\x5b\xfc\x0e\xe0\xb9\xa5\x9a\x15\xb5\x36\xea\x05\x4f\x68\x5f\x87\x4d\x7e\x28\xc2\x21\xfe\x98\x6e\x97\xbb\x7c\x1a\x5e\xa3\x50\x63\xc4\x94\xb4\x1c\xd8\xc1\x5d\x99\xd1\x16\x85\x67\x95\x17\x4a\xa3\xa5\x17\x72\x4d\x02\x71\x9e\xbf\x9f\x4b\x09\xe9\x2c\x81\x78\x31\x7f\x2b\x84\x82\xd5\x2a\x5c\x06\x26\xc8\xd2\x74\xf6\x3a\xe2\x3b\xa3\xdc\x6b\xfa\x9f\x94\x63\x2a\x90\x8e\xc8\x1d\xfe\x89\x70\xc8\xc3\x00\xe4\xc1\xab\xbb\x9b\xcb\xbe\xfe\xa0\xe4\x2d\x08\xcf\xce\xe5\xc1\xb9\x5b\xeb\x8c\xba\xaa\x89\x83\x74\x46\x85\xe6\x3d\xad\xbb\xbe\x9e\x66\x87\x68\xfe\x34\xf9\xaf\x1e\x52\xcd\x4b\xed\x5b\x1a\xa2\xf0\x14\xc7\x1b\x97\x75\xb6\xcf\xf3\xf7\x00\x00\x00\xff\xff\xe1\x5d\x42\x4c\x89\x03\x00\x00")

func static_style_css() ([]byte, error) {
	return bindata_read(
		_static_style_css,
		"static/style.css",
	)
}

var _templates_list_gohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x4f\x6f\xa3\x30\x10\xc5\xef\xf9\x14\xb3\x56\x8e\x21\xd6\xde\x56\x2b\x9b\xcb\xfe\x39\x45\x6a\xd5\xa6\x87\x1e\x1d\x33\xc4\x56\x1c\x3b\xb2\x87\x44\x11\xe2\xbb\x57\x06\xd1\x40\xd2\x72\x81\x79\x3f\x78\xbc\x99\xf1\x42\xfc\xf8\xfb\xf4\x67\xfb\xfe\xfc\x0f\x0c\x1d\x5d\xb9\x10\xf9\x06\x4e\xf9\xbd\x64\xe8\x59\xb9\x00\x00\x10\x06\x55\x35\x3c\xf6\xe5\x11\x49\x81\x36\x2a\x26\x24\xc9\x1a\xaa\x8b\x5f\xec\x1e\x7b\x75\x44\xc9\xce\x16\x2f\xa7\x10\x89\x81\x0e\x9e\xd0\x93\x64\x17\x5b\x91\x91\x15\x9e\xad\xc6\xa2\x2f\x56\x60\xbd\x25\xab\x5c\x91\xb4\x72\x28\x7f\xae\x20\x99\x68\xfd\xa1\xa0\x50\xd4\x96\xa4\x0f\x53\x7b\xb2\xe4\xb0\xdc\xd8\x44\x10\x6a\x78\x35\x21\x92\x6e\x28\x09\x3e\x80\xdb\x8b\xce\xfa\x03\x44\x74\x92\x25\xba\x3a\x4c\x06\x91\x18\x98\x88\xb5\x64\x3c\x91\x22\xab\x79\x4f\xd6\x3a\xa5\xb1\x55\x7e\xeb\x55\xec\x42\x75\x1d\xfd\x04\xa9\x9d\x43\xd0\x4e\xa5\x24\xd9\xce\x35\xb8\xcd\x02\x2b\x85\x56\x27\xb2\xc1\x97\x93\x24\xa3\x34\x09\x3d\x1f\x61\x56\xe2\xbc\x34\x9f\x06\x82\x93\xb9\x67\xff\x1b\xe7\xe0\xed\x65\xf3\xc0\xf8\xd4\x27\xd3\xf9\xaa\x68\xda\x43\xbe\xda\x36\x2a\xbf\x47\x58\x1e\xf0\xba\x82\xe5\x59\xb9\x06\xe1\xb7\x84\x75\xd7\x7d\x9f\x2e\x0b\x55\xd9\xb6\xf9\xa3\xae\x13\x9c\xaa\x2f\x69\x6f\xf6\xc8\xe7\x19\x73\x04\xf4\xd5\xe4\x77\x82\xcf\x52\x0a\xde\x8f\x7a\xdc\xc7\x80\x04\x1f\xce\xe7\x47\x00\x00\x00\xff\xff\xcb\xa4\x57\x09\xb1\x02\x00\x00")

func templates_list_gohtml() ([]byte, error) {
	return bindata_read(
		_templates_list_gohtml,
		"templates/list.gohtml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"static/style.css":      static_style_css,
	"templates/list.gohtml": templates_list_gohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"style.css": &_bintree_t{static_style_css, map[string]*_bintree_t{}},
	}},
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"list.gohtml": &_bintree_t{templates_list_gohtml, map[string]*_bintree_t{}},
	}},
}}
