package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _static_map_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\xdb\x46\x10\xbd\xf3\x2b\x1e\x74\x48\x29\x9b\x91\xec\xab\x1d\x05\xa8\xed\xa0\x0d\xe0\xb8\x40\xe3\xf6\x62\xf8\xb0\x22\x47\xe2\x42\xd4\xae\xba\x3b\x8c\x44\x34\xfe\xf7\x62\x76\x49\x8a\x4c\xa3\xb4\xb9\x25\x07\x43\xe1\xce\x9b\x7d\x6f\x66\xde\xec\xaa\x36\x39\x6b\x6b\xb0\xd2\x15\x93\xfb\xdd\xee\x7d\x3a\xc5\xdf\x09\x30\x9f\xe3\x8e\xf2\x4a\x39\xc2\x27\xe5\xb4\x5a\x56\xe4\x13\xc8\x6f\x68\xb3\xab\x39\x6b\x21\x19\x58\xce\x32\xb0\xfc\x2c\x32\xe8\x0c\x7c\xe0\x3f\x55\x55\xd3\x75\x82\x18\x8c\x05\x0a\x9b\xd7\x5b\x32\x3c\x5b\x13\xbf\xab\x48\x7e\xde\x34\xef\x8b\x74\xe2\x49\xb9\xbc\x7c\xa4\x03\x4f\xa6\x02\x88\x69\xb1\x88\xc8\xd9\x27\x49\x34\x63\xfb\xc7\x6e\x47\xee\x56\x79\x4a\x43\x54\xb8\xf4\x9b\x69\x1f\x25\x22\xa6\x64\x49\x17\x10\x83\x30\x7f\xd3\x3c\xaa\xf5\x83\xda\x52\x3a\x61\x27\x81\x51\xf5\xbd\xb5\x3b\x70\xe9\x6c\xbd\x2e\xa1\xaa\xaa\xbd\xca\xd9\xbd\xcf\xa0\x4c\x81\x52\x17\x04\x2e\xad\x27\xec\x4b\x8b\xc2\x9a\x9f\x18\x5b\xc5\x79\x09\x2e\x09\x51\x0f\xfe\xaa\xc9\x35\x22\xc7\x3a\xa4\x1a\x0b\x5c\x5c\x43\xe3\x0d\xd8\xcd\x2a\x32\x6b\x2e\xaf\xa1\xcf\xcf\x63\xad\x01\x2e\x84\xa1\x7b\xd2\xcf\xa7\x18\x16\x93\xe9\xd3\xc5\xf3\x75\x88\xd6\x2b\xa4\x5c\x74\x58\xf4\xf5\x96\x1c\xc5\x8c\xe9\xc0\xb7\xd6\x30\x19\xc6\xe7\xcf\xf2\x45\x1b\x43\x4e\x2a\x7c\xdd\x02\x42\x82\x16\x34\xae\xed\x4c\x9b\x82\x0e\xbf\xad\xd2\xd8\x86\x29\xde\xe2\xf5\xe5\xf1\x26\xb4\x24\x3d\x37\x15\xcd\x0a\xed\x77\x95\x6a\xb0\xc0\x64\xd2\xa5\x7e\x01\x55\x9e\xfe\x1b\x60\xac\xa1\x23\x28\xe9\xfe\xbe\x24\x2f\x49\xd2\x4f\xa5\xb7\x8e\x43\x1f\x53\x13\x39\xc8\xf8\xb5\xf3\x16\x1b\xe2\xf7\x9a\xf3\x52\x9b\x75\x18\xbc\x43\x86\x26\x83\x2f\x6d\x5d\x15\x1f\xc3\x49\x86\x42\xbb\x2e\x2c\xb7\xb5\xe1\xd0\x8a\xef\x9d\xa0\xfe\x9a\xd0\xa6\x38\xd9\xf3\x39\x3e\x12\xc7\x9e\x5b\xc7\x72\x58\x68\x47\x91\x39\x5b\x28\x9f\x93\x29\xb4\x59\x5f\x25\x90\x13\x51\xad\x7c\x1e\x44\xcf\xcf\xf0\x41\x6d\x08\x0a\x55\x1c\x37\xc5\xd8\xeb\xaa\x42\x6e\x0d\x6b\x53\x13\x6a\xc3\xba\x4a\x00\x63\x07\x97\x97\xca\x63\x49\x64\x64\xe8\xe8\x0a\x67\xf3\x04\xd8\x97\xba\x22\xa4\x7d\x50\xd7\x2c\xa1\xc7\xca\x31\x96\x0d\xbc\x6a\x84\xc7\x38\x99\xf6\x31\x4d\x88\x1e\x0a\x5c\xa9\xca\x53\x6c\x8d\x14\xb9\xf7\x8e\xfc\x27\x7e\x9e\x9f\x7d\xcb\x26\x48\xe9\x90\xd3\x2e\x94\x26\x84\xaf\xb4\xf3\x9c\x09\xd3\xbc\x0c\x0a\x95\x36\xbe\x05\x94\xa4\x0a\x72\x7e\xda\xaa\x19\x18\xe6\x32\x1a\x26\x95\x94\xad\x67\xf0\x1a\x97\xd3\x91\x71\xbe\xa6\x53\xee\x75\xd4\x8e\x01\x96\x34\x92\x7d\xd5\xc2\x86\x43\x32\xd6\x1c\xe4\xfd\xd2\x76\x96\xf7\x16\xd4\xda\x11\x8d\xad\xb1\x57\x86\xa5\xbb\xb9\xdd\xee\x94\xa3\xac\x85\x58\x43\x58\x39\xbb\x45\x5e\x3b\x27\xce\x73\x76\x1f\xb6\x45\x7f\x20\xd9\x0c\x1d\xb8\x17\x0a\x1c\xb0\x08\x05\x3b\x6d\xfb\xc7\xbb\xc9\xf4\xc9\x3c\x77\xc4\x9a\x1e\x80\x73\x5c\xfe\x4f\xd0\xfc\x0c\xb7\x25\xe5\x1b\x71\x7d\x27\x29\xb4\xa9\x2d\x50\x2c\x0d\x76\x95\xca\x7b\x39\x4b\xe5\x49\xb8\x07\x40\x3f\xd5\x99\xcc\x34\xac\x43\x41\x3e\x1f\xe8\x90\x75\x12\x06\xbc\x9d\xf0\xe1\xbe\x90\xb3\x43\xdc\x40\xbf\x3e\x7e\xb8\x9f\xb1\xbd\xb7\xfb\x6e\xdb\xe0\x2d\x9a\x53\x67\xc3\x24\xa1\xcb\xef\x57\xf0\x36\xc3\x56\xb9\x0d\x94\x87\xea\x88\x4b\x95\x97\x8e\xd4\x26\x90\x15\x3f\x5d\x0d\x80\x5f\xf4\xb9\x33\x6f\xf7\x2f\x00\x8f\x1f\x5e\xc6\x5b\x6c\x28\x4c\x34\x7f\x87\xb2\x37\x3f\xaa\xb2\xe4\xf8\x57\x14\x0c\xb3\x0c\x4c\x75\x26\xa4\x7a\x22\xfd\xde\x11\x8a\x54\x08\xd5\x0d\xc5\xcd\x17\x02\x5a\x94\xf0\x0d\x22\xc2\x3e\xfb\x37\x7a\xb0\xb5\xba\xe5\x22\xa3\x2f\x3e\x32\xfc\x60\x0b\x9a\x69\xe3\xc9\xf1\x0d\xad\xac\xa3\x74\x30\xe9\x59\x17\x3c\xed\x14\x7d\x6d\x23\xb7\xe5\x7c\xa7\xe4\x29\xd6\x5b\x3a\x52\x68\x77\x5d\x06\x6d\x72\x47\xca\x0b\x79\xed\x11\x1f\x84\x65\x83\xcb\xab\x51\xda\xf0\xfd\xfc\x3c\xe6\xfc\xe2\x45\x8b\xa5\x39\xbd\x96\xf1\xf3\xc3\xdd\xd8\x36\x72\x7b\xf0\x45\xe7\x2e\xdf\x2e\x97\xd1\x73\x11\x07\x2c\xd4\xd0\xd5\xd1\x78\x71\xb5\x87\x17\x42\xad\x95\x36\xb3\xb1\xe5\x46\x8f\xda\x02\x17\x78\xf5\x0a\xa7\x6c\xd8\xbe\x3f\xe1\x8e\xe3\x50\x9c\x2a\xe2\xf8\x3d\xfe\x27\x00\x00\xff\xff\x05\x9b\x7e\xa4\x25\x0a\x00\x00")

func static_map_js() ([]byte, error) {
	return bindata_read(
		_static_map_js,
		"static/map.js",
	)
}

var _static_searchicon_png = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x05\x61\x0e\x36\x06\x06\x86\x95\xe2\x4b\xa7\x31\x30\x30\x30\x16\x07\xb9\x3b\x31\xac\x3b\x27\xf3\x92\x81\x81\x81\x25\xdd\xd1\xd7\x91\x81\x61\x63\x3f\xf7\x9f\x44\x56\x06\x06\x06\xce\x02\x8f\xc8\x62\x06\x06\xa1\x12\x10\x66\xbc\x97\x26\x5f\xc1\xc0\xc0\xc0\x94\xe4\xed\xee\xc2\xf0\xbf\xbd\xff\xcc\x7e\x90\x92\xb2\x02\xc7\x74\x06\x06\x46\x2d\x06\x06\x46\x4d\x86\x00\xb1\x54\x43\x06\x06\x06\xd5\x12\xd7\x88\x92\x94\xc4\x92\x54\xab\xe4\xa2\xd4\xc4\x92\x54\x06\x23\x03\x43\x63\x5d\x03\x13\x5d\x43\x83\x10\x03\x33\x2b\x53\x4b\x2b\x03\x73\x5d\x03\x73\x2b\x03\x83\x3e\xc7\xce\x40\x14\x0d\xb9\xf9\x29\x99\x69\x95\xb8\x35\xfc\x97\x31\x7c\xcb\xc0\xc0\x20\x09\xd2\x10\x9c\x9f\x56\x52\x9e\x58\x94\xca\x50\x5e\x5e\xae\x97\x99\x97\x5d\x9c\x9c\x58\x90\xaa\x97\x5f\x94\x3e\xfb\x9d\x8d\x14\x03\x03\x83\x20\x48\x51\x48\x66\x49\x4e\x2a\x43\x71\x6a\x62\x51\x72\x86\x6e\x66\x72\x7e\xde\xa1\xe6\x37\xb5\x0c\x0c\x4c\x5a\x9e\x2e\x8e\x21\x16\xfe\x4b\xa7\x78\xae\x7e\xe5\x20\xd0\xaa\xfd\x76\x8d\x42\xdf\x03\x2f\xc1\x70\xbd\xa9\x3a\x2c\x82\x47\xeb\xdf\x7a\x15\xb0\xb0\x1e\x5c\xba\x68\x51\xb4\xfa\x1c\x81\xe7\xbf\xdf\x69\x5e\x52\xbc\xb8\xe2\xc3\x3b\x76\x45\xcf\xf2\xaf\x2b\x5f\xad\x7a\x15\x56\x57\xa7\xc8\xfc\xfd\xf7\xdc\x65\x97\x35\xd7\x86\x69\x5b\xc9\xf5\xdb\x3c\x2b\xdb\xad\x29\xc1\x13\xa4\x34\xf1\xc1\xfb\xfc\x19\x2e\xec\xcd\x8c\xbd\xc7\x93\x8b\xac\xe6\xaa\xb4\x28\xb8\x06\x56\xc8\xa8\xf5\x1f\x6f\x5e\x77\x5d\xfb\x68\x92\xe1\xa9\x14\x23\x9b\x7f\x7c\xb1\x5b\x2e\xbf\xbc\x90\xb6\x59\xb1\xfd\xf0\x41\xe1\x0e\x09\x27\x86\x47\x65\xbb\xe7\xee\x37\xe4\x9b\x9d\xb4\xf1\xc4\xff\xb0\x0d\x1a\x4a\x73\xce\xa6\xc9\x2c\x14\xf1\x5e\x1a\x24\xc2\xd7\x6e\x99\x64\x21\xdd\xeb\x66\xc3\xfe\xf1\xf6\x5b\xb7\x46\x87\x86\x90\xd0\xab\x29\x67\x34\xf6\xb3\xd9\x4f\xf5\x6a\xb5\x91\xe3\xef\x56\x4c\xff\x59\x13\x37\xdb\xec\xf2\xeb\xaf\x19\x7b\xe3\x36\x7f\x78\x59\xb2\x28\x46\xef\xf8\xa3\xf3\x1c\x22\xac\x82\x4c\x1d\xfb\x84\x59\x6e\xe6\x4c\xcb\x4d\x6c\x17\x51\xf8\x1f\xc6\x11\x22\x19\x7d\xe4\xda\x86\xa7\xf9\x4b\x2e\x67\x6e\x3b\x3a\xeb\x69\xd1\xca\xde\x59\x82\x19\xd2\x22\x4c\xf7\x94\x27\x76\x98\xfd\x99\x17\xa0\x71\x64\x5b\x84\xf2\xee\x47\x92\x0b\x45\xe7\x4f\xd4\xfd\xc2\xe9\x92\x71\x24\x28\xc4\xcc\x98\x65\xfb\x6d\xdd\xfa\x7a\x26\x33\x23\x2f\x85\xe8\xb3\x1d\x07\x3c\x1b\xcd\x67\x9f\x3d\x96\xfb\xb9\xf7\x61\xc1\x09\x27\x81\xad\xab\x6c\x04\x3e\x56\xcc\xd1\x9b\xce\x9d\xcf\xfd\xf7\xfa\xfb\xef\x5b\x57\x86\x3f\x10\xb1\xd5\xe6\x9e\xed\xa3\xb6\x55\xd2\xf8\xd0\xeb\xaf\x41\x26\x52\xa9\x8e\x2e\x06\xf3\xcf\xaf\xbc\x99\x53\x64\xef\x55\xb6\x5b\xb6\x74\x77\xec\x2c\x1f\xb5\x3b\x41\x1d\x42\xfc\xd7\x22\x17\xca\x5f\xce\xda\xba\x6a\xbe\xc4\x12\x66\xbf\x14\x41\x01\xc9\x4b\xcd\xec\xcf\x8c\x96\xdf\x48\xdc\x19\x73\xad\x7f\xdb\x91\x92\x85\x5b\x6e\xe7\xea\xb1\x2c\xaa\x7c\xc7\x32\xe3\xa0\xe6\x3d\x81\x83\x36\x73\x1e\x4d\xd2\x9c\xea\xf5\xa4\x68\xa7\xc9\x69\xf5\xc0\x0d\x11\x3a\x3f\x96\x28\x94\x07\x49\x74\xff\xad\xb3\x97\xe7\x2b\xe1\x9e\xf3\x58\x57\xd9\x6e\xfe\xf9\x9a\x83\x0f\x56\x34\x8b\x07\x2a\x1b\xb0\x1d\xd3\x60\x28\xbb\x9c\xb5\x35\xae\x85\xbb\x95\xe9\x67\xcd\xbe\xf3\x8b\xe6\xdf\x78\xff\xfd\x4a\x86\x89\xcf\xa1\x1d\x29\x02\x1f\xeb\xbb\x9b\x0e\x3f\x74\xf8\x5a\x15\x2b\xee\x36\x2b\xe0\x85\x7d\x27\xd3\x1d\xd9\xad\x51\xbe\xfb\x5f\x5e\xd0\xac\x17\x63\x3d\xa1\xfe\x4b\x62\xee\x82\x55\x5a\x7f\x99\xb9\x97\xa7\x6e\xa9\xeb\xda\x7c\x8e\x81\x81\x81\xc1\xd3\xd5\xcf\x65\x9d\x53\x42\x13\x20\x00\x00\xff\xff\x2b\x20\x37\xe6\x5c\x03\x00\x00")

func static_searchicon_png() ([]byte, error) {
	return bindata_read(
		_static_searchicon_png,
		"static/searchicon.png",
	)
}

var _static_style_css = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xe2\x30\x10\xbd\xf3\x2b\x46\x42\x55\x3f\x84\x21\xa1\x40\x77\xcd\xa9\xda\xb6\xfb\x07\xaa\xbd\x3b\xf1\x24\xb1\xea\xd8\x96\x33\xb4\x69\x57\xfb\xdf\x57\x76\x0a\x84\x00\x95\x56\x5a\x73\x31\x13\xbf\x37\xe3\x79\xf3\x4c\x22\xd3\x38\xcd\xf4\x06\x9f\xc3\x0e\x7e\x8f\x00\x0a\x6b\x88\x15\xa2\x56\xfa\x9d\xc3\x2f\xf4\x52\x18\x31\x81\x9f\x68\xf0\x55\x4c\xa0\x11\xa6\x61\x0d\x7a\x55\xac\x47\x00\x99\xf5\x12\x3d\x87\xd4\xb5\xd0\x58\xad\x24\x8c\xd3\x1f\xab\xc7\xfb\x45\xf8\x58\x0b\x5f\x2a\xc3\xbc\x2a\x2b\xe2\xb0\x48\x5c\x1b\xa2\xb3\x1b\xc8\x44\xfe\x52\x7a\xbb\x31\x92\xe5\x56\x5b\xcf\x61\xfc\x18\xd7\x1a\x6e\x66\x23\x80\x37\x25\xa9\xe2\x70\xb7\xbc\x08\x00\xc2\x96\x98\xd0\xaa\x34\x1c\x34\x16\xb4\xcf\x1b\xd0\x5a\xb8\x06\x39\x6c\x77\xeb\xd1\x9f\xd1\x68\x78\x2b\x92\x93\xe3\x58\x15\x2f\xeb\x84\x94\xca\x94\x1c\x6e\x5d\x0b\xf3\x50\xe1\x29\x7c\x77\xf6\xc4\x65\xef\xe3\x3a\x93\xb4\x07\x62\x99\x25\xb2\xf5\x01\x56\x4a\x79\x1a\x98\x59\xf9\xbe\x85\x47\x31\x1a\xf5\x81\x1c\xd2\xd5\xb9\xf2\x3c\x37\x96\xae\xa6\x54\xa1\x90\xd7\xbc\xb2\xaf\xe8\xbb\xdc\xc7\x7d\x2e\xd2\xf0\x3b\x73\x4b\x14\x72\x80\xe3\x7d\x3d\xfb\x61\x56\xdb\x0f\xa6\x95\x41\xe1\x59\xe9\x85\x54\x68\xe8\x8a\xac\x9b\xc0\x78\xb9\xfc\x3e\xcf\x32\x48\x2e\x26\x30\xbe\x9d\xdf\xe5\x42\xc2\x6a\x15\xfe\x74\x4c\x90\x26\xc9\xc5\xf5\x11\xdf\x1b\x66\x2f\x8a\xfe\x27\xe5\x31\x15\x74\x2a\xfc\x13\xe1\xa1\x7c\xf3\xbd\x7c\x8b\xb8\xbe\xe8\xe4\xe7\xd4\xf4\x15\xfc\xd6\x59\x20\x86\xde\xb0\xf3\x45\x66\xb5\x0c\xc1\xad\x42\x4f\x71\xf5\x72\x87\x99\x3f\xc8\xfc\x90\x3c\x2e\x9e\x96\x5f\x66\xe6\x85\xf2\x0d\xb1\xbc\x52\xfa\x60\x0c\x3b\x2e\x63\x4d\x67\x94\x69\x2d\x94\x79\x50\xaf\xf1\xc8\x79\xd7\xe5\x68\x08\x7d\x44\x28\xe3\x36\x34\x6d\x50\xf8\xbc\x7a\xc6\x96\x86\x73\xa6\x6a\x51\x22\x87\x8d\xd7\x57\x97\xb3\x86\x04\xa9\x7c\xd6\x9d\x56\xb9\x35\x53\x67\xca\xcb\x81\x50\xcc\xd9\x46\x91\xb2\x86\x43\x9a\xb8\x16\xd2\x79\xd7\xa4\xde\x09\x8f\x0e\x45\xac\xfb\x73\xbb\xde\x97\x1b\x94\x5a\x9f\x32\xca\xce\xdb\x8c\xac\xe3\x3b\xda\x6d\x70\x67\xc8\x41\xbc\xeb\xd0\xf6\xb1\x3a\x61\xf9\x68\xdb\xdd\xe3\x36\xa4\xc9\x6c\x1b\xaa\x88\x4f\xca\x6e\x76\xa2\x6d\xff\x06\x00\x00\xff\xff\x09\x04\x20\x29\x6b\x05\x00\x00")

func static_style_css() ([]byte, error) {
	return bindata_read(
		_static_style_css,
		"static/style.css",
	)
}

var _templates_list_gohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdb\x3c\x0c\xbe\xf7\x57\xe8\xe5\xa9\x01\x1a\xeb\xcd\x4e\x3b\x48\xbe\xb4\xdb\x69\xc0\x8a\xb6\x1b\xb0\xa3\x22\x33\x15\x17\x45\x32\x24\x3a\x59\x60\xf8\xbf\x0f\xb6\xf3\x61\xb7\x3b\xd4\x17\x93\x7c\xc8\x87\x9f\x90\xfa\xef\xe1\xfb\xfd\xcb\xaf\xc7\x2f\xc2\xf1\xce\x97\x37\xaa\xff\x09\x6f\xc2\xab\x06\x0c\x50\xde\x08\x21\x84\x72\x68\xaa\x51\x1c\xd4\x1d\xb2\x11\xd6\x99\x94\x91\x35\x34\xbc\x59\x7e\x86\xb7\x70\x30\x3b\xd4\xb0\x27\x3c\xd4\x31\x31\x08\x1b\x03\x63\x60\x0d\x07\xaa\xd8\xe9\x0a\xf7\x64\x71\x39\x28\x77\x82\x02\x31\x19\xbf\xcc\xd6\x78\xd4\xab\x3b\x91\x5d\xa2\xb0\x5d\x72\x5c\x6e\x88\x75\x88\x53\x7a\x26\xf6\x58\x3e\xbb\x98\xd8\x36\x9c\x95\x1c\x0d\x57\x07\x4f\x61\x2b\x12\x7a\x0d\x99\x8f\x1e\xb3\x43\x64\x10\x2e\xe1\x46\x83\xcc\x6c\x98\xac\x1c\x90\xc2\xe6\x3c\x65\xce\x36\x51\xcd\x22\x27\x7b\x75\xdc\x99\xba\xf8\x9d\xa1\x54\x72\x44\x4f\x13\x91\xd7\x91\xa8\x75\xac\x8e\x67\x16\x55\xd1\x5e\x58\x6f\x72\xd6\xb0\x33\x14\x1e\x68\x3f\xcd\xe0\x56\xd3\xc2\xdd\x6a\x02\x51\xa8\x1b\x16\x7c\xac\x51\x03\xe3\x9f\x7e\x64\x23\x4d\x46\x93\xac\x7b\x19\x4c\x54\xcd\xf5\x18\xb6\x78\x6c\x6a\x0d\x1b\xf2\x8c\xe9\x29\x1e\xf2\xed\x02\x44\xed\x8d\x45\x17\x7d\x85\x49\xc3\xf3\xe0\x2f\xf2\x39\x6f\x51\x5c\x2a\x52\xb2\xa2\xfd\x45\x61\xb3\xf6\x78\xce\xba\xf6\x0d\xbe\xf4\x86\x53\xd2\x51\x9e\xae\x61\x7e\x14\xbd\x25\x9d\x83\x07\x0c\xe6\xa0\x13\x31\x58\x4f\x76\xab\x21\xc7\xc4\x03\xdf\xed\xff\x0b\xb8\x0c\x44\x49\x76\x1f\x08\x59\x2d\xa0\xfc\xda\x78\x2f\x7e\x3c\x7d\xfb\x60\xc8\xa7\x05\x94\x3f\x29\xd3\x70\x2c\xf3\x00\xc9\x69\xd2\x93\x7c\xd3\x94\xe2\xe9\x6e\xfb\xaf\x6d\x93\x09\xaf\x28\x8a\xae\x9b\xb7\x3e\x75\xea\x0d\x55\xd9\xb6\xc5\xa3\x61\xd7\x75\x4a\x72\xf5\x1e\x56\xe6\x74\x92\x6d\x5b\x3c\x13\x63\xd7\x41\x79\x11\x95\x34\xe5\xbf\xc3\xda\xb6\xb8\x8f\x4d\xe0\xf7\xb4\xf3\x5e\xfa\x52\x31\x54\x93\x32\x95\x9c\x75\xa3\xe4\xb0\xef\xf3\x3d\x8f\x90\x92\xe3\x33\xf0\x37\x00\x00\xff\xff\xed\x89\x69\x30\x17\x04\x00\x00")

func templates_list_gohtml() ([]byte, error) {
	return bindata_read(
		_templates_list_gohtml,
		"templates/list.gohtml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"static/map.js":         static_map_js,
	"static/searchicon.png": static_searchicon_png,
	"static/style.css":      static_style_css,
	"templates/list.gohtml": templates_list_gohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"map.js":         &_bintree_t{static_map_js, map[string]*_bintree_t{}},
		"searchicon.png": &_bintree_t{static_searchicon_png, map[string]*_bintree_t{}},
		"style.css":      &_bintree_t{static_style_css, map[string]*_bintree_t{}},
	}},
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"list.gohtml": &_bintree_t{templates_list_gohtml, map[string]*_bintree_t{}},
	}},
}}
